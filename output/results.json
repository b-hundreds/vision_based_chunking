{
  "document_name": "how_llm_handle_long_context.pdf",
  "total_pages": 18,
  "chunks": [
    {
      "id": "5f672fbd-f01b-46b5-8815-1498f565a1ac",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Title and Authors > Title and Authors",
      "content": "Lost in the Middle: How Language Models Use Long Contexts\n\nNelson F. Liu¹*\nKevin Lin²\nJohn Hewitt¹\nAshwin Paranjape³\nMichele Bevilacqua³\nFabio Petroni³\nPercy Liang¹\n¹Stanford University\n²University of California, Berkeley\n³Samaya AI\nnfl iu@cs.stanford.edu",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Title and Authors",
      "chunk_title": "Title and Authors",
      "page_numbers": [
        1
      ]
    },
    {
      "id": "2de64481-231c-4429-aa82-4069017a713f",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Abstract > Abstract",
      "content": "Abstract\n\nWhile recent language models have the ability to take long contexts as input, relatively little is known about how well they use longer context. We analyze the performance of language models on two tasks that require identifying relevant information in their input contexts: multi-document question answering and key-value retrieval. We find that performance can degrade significantly when changing the position of relevant information, indicating that current language models do not robustly make use of information in long input contexts. In particular, we observe that performance is often highest when relevant information occurs at the beginning or end of the input context, and significantly degrades when models must access relevant information in the middle of long contexts, even for explicitly long-context models. Our analysis provides a better understanding of how language models use their input context and provides new evaluation protocols for future long-context language models.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Abstract",
      "chunk_title": "Abstract",
      "page_numbers": [
        2
      ]
    },
    {
      "id": "9bd4a55a-d871-4895-879d-54eb4ce6a64e",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Figure 1 > Figure and Caption",
      "content": "Accuracy\n50\n55\n60\n65\n70\n75\n1st 5th 10th 15th 20th\nPosition of Document with the Answer\n\ngpt-3.5-turbo-0613\ngpt-3.5-turbo-0613 (closed-book)\n\nFigure 1: Changing the location of relevant information (in this case, the position of the passage that answers an input question) within the language model’s input context results in a U-shaped performance curve—models are better at using relevant information that occurs at the very beginning (primacy bias) or end of the input context (recency bias), and performance degrades significantly when models must access and use information located in the middle of its input context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Figure 1",
      "chunk_title": "Figure and Caption",
      "page_numbers": [
        3
      ]
    },
    {
      "id": "3666791b-9581-4731-8c05-a798a7274b07",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 1 Introduction > Overview of Language Models and Long Contexts",
      "content": "**1 Introduction**\n\nLanguage models have become an important and flexible building block in a variety of user-facing language technologies, including conversational interfaces, search and summarization, and collaborative writing (Shuster et al., 2022; Thoppilan et al., 2022; Lee et al., 2022, inter alia). These models perform downstream tasks primarily via prompting: all relevant task specification and data to process is formatted as a textual input context, and the model returns a generated text completion. These input contexts can contain thousands of tokens, especially when language models are used to process long documents (e.g., legal or scientific documents, conversation histories, etc.) or when language models are augmented with external information (e.g.\n\n*Work partially completed as an intern at Samaya AI.\nrelevant documents from a search engine, database query results, etc; Petroni et al., 2020; Ram et al., 2023; Shi et al., 2023; Mallen et al., 2023; Schick et al., 2023, inter alia).\n\nHandling these use-cases requires language models to successfully operate over long sequences. Existing language models are generally implemented with Transformers (Vaswani et al., 2017), which require memory and compute that increases quadratically in sequence length. As a result, Transformer language models were often trained with relatively small context windows (between 512-2048 tokens). Recent improvements in hardware (e.g., faster GPUs with more memory) and algorithms (Dai et al., 2019; Dao et al., 2022; Poli et al.,\n2023; Rubin and Berant, 2023, inter alia) have resulted in language models with larger context windows (e.g., 4096, 32K, and even 100K tokens), but it remains unclear how these extended-context language models make use of their input contexts when performing downstream tasks.\n\nWe empirically investigate this question via controlled experiments with a variety of state-of-the-art open (MPT-30B-Instruct, LongChat-13B (16K)) and closed (OpenAI’s GPT-3.5-Turbo and Anthropic’s Claude 1.3) language models in settings that require accessing and using information within an input context. In particular, our experiments make controlled changes to the input context size and the position of the relevant information within the input context and study their effects on language model performance. If language models can robustly use information within long input contexts, then their performance should be minimally affected by the position of the relevant information in the input context.\n\nWe first experiment with multi-document question answering, which requires models to reason over provided documents to find relevant information and use it to answer a given question; this task mimics the retrieval-augmented generation setup underlying many commercial generative search and question answering applications (e.g., Bing Chat). In this setting, we control (i) the input context length by changing the number of documents in the input context (akin to retrieving more or less documents in retrieval-augmented generation), and (ii) control the position of the relevant information within the input context by changing the order of the documents to place the relevant document at the beginning, middle or end of the context.\n\nWe find that changing the position of relevant information in the input context can substantially affect model performance, indicating that current language models do not robustly access and use information in long input contexts. Furthermore, we observe a distinctive U-shaped performance curve (Figure 1): language model performance is highest when relevant information occurs at the very beginning (primacy bias) or end of its input context (recency bias), and performance significantly degrades when models must access and use information in the middle of their input context (§2.1). For example, when relevant information is placed in the middle of its input context, GPT-3.5-Turbo’s performance on the multi-document question task is lower than its performance when predicting without any documents (i.e., the closed-book setting; 56.1%). Furthermore, we find that models often have identical performance to their extended-context counterparts, indicating that extended-context models are not necessarily better at using their input context (§2.3).\nGiven that language models struggle to retrieve and use relevant information in the multi-document question answering task, to what extent can language models even retrieve from their input contexts? We study this question with a synthetic key-value retrieval task, which is designed to be a minimal testbed for the basic ability to retrieve matching tokens from the input context. In this task, models are given a collection of JSON-formatted key-value pairs and must return the value associated with a specific key. Similar to the multi-document QA task, the key-value retrieval task allows controlled changes to the input context length (adding more key-value pairs) and the position of relevant information. Although some models perform the synthetic key-value retrieval task perfectly, other models struggle to simply retrieve matching tokens that occur in the middle of their input context and continue to exhibit a U-shaped performance curve.\n\nTo better understand why language models struggle to robustly access and use information in their input contexts, we study the role of model architecture (decoder-only vs. encoder-decoder), query-aware contextualization, and instruction fine-tuning (§4). We find that:\n*   Encoder-decoder models are relatively robust to changes in the position of relevant information within their input context, but only when evaluated on sequences within its training-time sequence length. When evaluated on sequences longer than those seen during training, we observe a U-shaped performance curve (§4.1).\n*   Query-aware contextualization (placing the query before and after the documents or key-value pairs) enables near-perfect performance on the synthetic key-value task, but minimally changes trends in multi-document QA (§4.2).\n*   Even base language models (i.e., without instruction fine-tuning) show a U-shaped performance curve as we vary the position of relevant information in the input context.\n\nOur results indicate that prompting language\nmodels with longer input contexts is a trade-off—providing the language model with more information may help it perform the downstream task, but it also increases the amount of content that the model must reason over, potentially decreasing accuracy. To better understand this trade-off in practice, we perform a case study with retriever-reader models on open-domain question answering (§5). In contrast to our controlled multi-document QA task, where the context always contains exactly one document that answers the question, none or many of the top k documents may contain the answer in the open-domain QA setting. When retrieving from Wikipedia to answer queries from NaturalQuestions-Open, we find that model performance saturates long before retriever recall saturates, indicating that current models fail to effectively use additional retrieved documents—using 50 documents instead of 20 retrieved documents only marginally improves performance (∼1.5% for GPT-3.5-Turbo and ∼1% for claude-1.3).\n\nOur analysis provides a better understanding of how language models use their input context and introduces new evaluation protocols for future long-context models; to claim that a language model can robustly use information within long input contexts, it is necessary to show that its performance is minimally affected by the position of the relevant information in the input context (e.g., minimal difference in best- and worst-case performance). To facilitate further work on understanding and improving how language models use their input context, we release our code and evaluation data.¹",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "1 Introduction",
      "chunk_title": "Overview of Language Models and Long Contexts",
      "page_numbers": [
        4
      ]
    },
    {
      "id": "d42fcff5-5a06-4f6a-a4c1-c9f9458e9a57",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > Introduction",
      "content": "**2 Multi-Document Question Answering**\n\nOur goal is to better understand how language models use their input context. To this end, we analyze model performance on multi-document question answering, which requires models to find relevant information within an input context and use it to answer the question. In particular, we make controlled changes to the length of the input context and the position of the relevant information and measure changes in task performance.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "Introduction",
      "page_numbers": [
        4
      ]
    },
    {
      "id": "519ed927-a03f-4886-9a0e-45d890afe879",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > 2.1 Experimental Setup",
      "content": "**2.1 Experimental Setup**\n\nIn the multi-document question answering task, the model inputs are (i) a question to answer and (ii) k documents (e.g., passages from Wikipedia), where exactly one of the documents contains the answer\n\n¹nelsonliu.me/papers/lost-in-the-middle\nto the question and k − 1 “distractor” documents do not. This task requires the model to access the document that contains the answer within its input context and use it to answer the question. Figure 2 presents an example.\n\nWe instantiate this task with data from NaturalQuestions-Open (Lee et al., 2019; Kwiatkowski et al., 2019), which contains historical queries issued to the Google search engine, coupled with human-annotated answers extracted from Wikipedia. In particular, we take the 2655 queries where the annotated long answer is a paragraph (as opposed to a list or a table). We use passages (chunks of at most 100 tokens) from Wikipedia as documents within our input contexts. For each of the queries, we need a document that contains the answer and k − 1 distractor documents that do not contain the answer. To obtain a document that answers the question, we use the Wikipedia paragraph that contains the answer from the NaturalQuestions annotations.\n\nTo collect k − 1 distractor documents that do not contain the answer, we use a retrieval system (Contriever, fine-tuned on MS-MARCO; Izacard et al., 2021) to retrieve the k − 1 Wikipedia chunks that are most relevant to the query and do not contain any of the NaturalQuestions-annotated answers.²,³ In the input context, the distractor documents are presented in order of decreasing relevance.³\n\nTo modulate the position of relevant information within the input context, we adjust the order of the documents to change the position of the document that contains the answer (Figure 3). To modulate the input context length in this task, we increase or decrease the number of retrieved documents that do not contain the answer (Figure 4).\n\nFollowing Kandpal et al. (2022) and Mallen et al. (2023), we use accuracy as our primary evaluation metric, judging whether any of the correct answers (as taken from the NaturalQuestions annotations) appear in the predicted output.\n\n²Ambiguity in NaturalQuestions-Open means that a small number of distractor passages may contain a reasonable answer. We additionally run experiments on subsets of unambiguous questions, finding similar results and conclusions; see Appendix A.\n³We also explored using random documents as distractors, see Appendix B for more details.\n⁴Since there might be an prior over “search results” appearing in ranked order, we explored randomly ordering the k − 1 distractor documents and found using that the documents are randomly ordered in the task description, but found the same trends. See Appendix C for more details.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "2.1 Experimental Setup",
      "page_numbers": [
        4
      ]
    },
    {
      "id": "af2be3fe-1926-42fd-b76c-8af654ecf1c5",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > Figure 2: Example of Multi-Document Question Answering",
      "content": "Input Context\nWrite a high-quality answer for the given question using only the provided search results (some of which might be irrelevant).\n\nDocument [1](Title: Asian Americans in science and technology): Prize in physics for his theory of the atomic nucleus and subnuclear phanomenon shared...\nDocument [2](Title: List of Nobel laureates in Physics): The first Nobel Prize in Physics was awarded in 1901 to Wilhelm Conrad Röntgen, of Germany, who received...\nDocument [3](Title: Scientist): and pursued through a unique method, was essentially in place. When y Exist won the Nobel Prize in 1906 for his remarkable...\n...\nQuestion: who got the first nobel prize in physics\nAnswer:\n\nDesired Answer\nWilhelm Conrad Röntgen\n\nFigure 2: Example of the multi-document question answering task, with an input context and the desired model answer. The document containing the answer is bolded within the input context here for clarity.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "Figure 2: Example of Multi-Document Question Answering",
      "page_numbers": [
        4
      ]
    },
    {
      "id": "963deebe-50da-4f36-8059-5be9c06c705b",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > Figure 3: Modulating Position of Relevant Information",
      "content": "Input Context\nWrite a high-quality answer for the given question using only the provided search results (some of which might be irrelevant).\n\nDocument [1](Title: List of Nobel laureates in Physics)\nDocument [2](Title: Asian Americans in science and technology)\nDocument [3](Title: Scientist) ...\n\nQuestion: who got the first nobel prize in physics\nAnswer:\n\nDesired Answer\nWilhelm Conrad Röntgen\n\nFigure 3: Modulating the position of relevant information within the input context for the multi-document question answering example presented in Figure 2. Reordering the documents in the input context does not affect the desired output.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "Figure 3: Modulating Position of Relevant Information",
      "page_numbers": [
        4
      ]
    },
    {
      "id": "d1d76404-0a99-479d-b948-102a495c97e9",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > Figure 4: Modulating Input Context Length",
      "content": "Input Context\nWrite a high-quality answer for the given question using only the provided search results (some of which might be irrelevant).\n\nDocument [1](Title: Asian Americans in science and technology)\nDocument [2](Title: List of Nobel laureates in Physics)\nDocument [3](Title: Scientist)\nDocument [4](Title: Marie Curie)\nDocument [5](Title: Maria Goeppert Mayer) ...\n\nQuestion: who got the first nobel prize in physics\nAnswer:\n\nDesired Answer\nWilhelm Conrad Röntgen\n\nFigure 4: Modulating the input context length of the multi-document question answering example presented in Figure 2. Adding documents that do not contain the answer increases the length of the input context, but does not affect the desired output.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "Figure 4: Modulating Input Context Length",
      "page_numbers": [
        4
      ]
    },
    {
      "id": "883c8918-2b39-4b94-9f76-305dd0128a1a",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > 2.1 Experimental Setup",
      "content": "Our experimental setup is similar to the needle-in-a-haystack experiments of Ivgi et al. (2023), who compare question answering performance when the relevant paragraph is placed (i) at the beginning of the input or (ii) a random location within the input. They find that encoder-decoder models have significantly higher performance when relevant information is placed at the start of the input context. In contrast, we study finer-grained changes in the position of relevant information.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "2.1 Experimental Setup",
      "page_numbers": [
        4
      ]
    },
    {
      "id": "627de73e-96c6-44d1-8531-6926f3cfa04c",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > 2.2 Models",
      "content": "**2.2 Models**\n\nWe analyze several state-of-the-art open and closed language models. We use greedy decoding when generating outputs and leave exploration of other decoding methods to future work. We use a standard set of prompts for each model (Figure 2).\n**Open models.** We experiment with MPT-30B-Instruct, which has a maximum context length of 8192 tokens. The model was initially pre-trained on 1 trillion tokens using 2048-token sequences, followed by an additional sequence length adaptation pre-training phase on 50 billion tokens using 8192-token sequences. MPT-30B-Instruct uses ALiBi (Press et al., 2022) to represent positional information. We also evaluate LongChat-13B (16K) (Li et al., 2023), which extends the LLaMA-13B (Touvron et al., 2023a) context window from 2048 to 16384 tokens by using condensed rotary positional embeddings before fine-tuning with 16384-token sequences.\n**Closed models.** We use the OpenAI API to experiment with GPT-3.5-Turbo and GPT-3.5-Turbo\n(16K).⁶ GPT-3.5-Turbo has a maximum context length of 4K tokens, and GPT-3.5-Turbo (16K) is a version with an extended maximum context length of 16K tokens. We evaluate Claude-1.3 and Claude-1.3 (100K) with the Anthropic API; Claude-1.3 has a maximum context length of 8K tokens, and Claude-1.3 (100K) has an extended context length of 100K tokens.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "2.2 Models",
      "page_numbers": [
        4,
        5
      ]
    },
    {
      "id": "3e2243ba-eb80-4841-8692-52e42a48a7d5",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > Figure 5: Effect of Document Position on Performance",
      "content": "[Image of three line graphs showing accuracy vs. position of document with the answer for 10, 20, and 30 total retrieved documents.]\n\nFigure 5: The effect of changing the position of relevant information (document containing the answer) on multi-document question answering performance. Lower positions are closer to the start of the input context. Performance is highest when relevant information occurs at the very start or end of the context, and rapidly degrades when models must reason over information in the middle of their input context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "Figure 5: Effect of Document Position on Performance",
      "page_numbers": [
        6
      ]
    },
    {
      "id": "8db42d52-93d9-4df1-91b7-4ba80d27b403",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2 Multi-Document Question Answering > Table 1: Closed-book and Oracle Accuracy",
      "content": "Table 1: Closed-book and oracle accuracy of language models on the multi-document question answering task.\n\n| Model | Closed-Book | Oracle |\n| :--- | :--- | :--- |\n| LongChat-13B (16K) | 35.0% | 83.9% |\n| MPT-30B-Instruct | 41.4% | 81.9% |\n| GPT-3.5-Turbo | 56.1% | 88.3% |\n| GPT-3.5-Turbo (16K) | 56.0% | 88.6% |\n| Claude-1.3 | 48.3% | 76.1% |\n| Claude-1.3 (100K) | 48.2% | 76.4% |",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2 Multi-Document Question Answering",
      "chunk_title": "Table 1: Closed-book and Oracle Accuracy",
      "page_numbers": [
        7
      ]
    },
    {
      "id": "3dfb53d7-d57b-45f4-bc00-95e480131c6e",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 2.3 Results and Discussion > Introduction and U-Shaped Performance Curve",
      "content": "2.3 Results and Discussion\n\nWe experiment with input contexts containing 10, 20, and 30 total documents. Figure 5 presents multi-document question answering performance when varying the position of relevant information within the input context. To contextualize model performance, we also evaluate on the closed-book and oracle settings (Table 1). In the closed-book setting, models are not given any documents in their input context, and must rely on their parametric memory to generate the correct answer. On the other hand, in the oracle setting, language models are given the single document that contains the answer and must use it to answer the question.\n\nModel performance is highest when relevant information occurs at the beginning or end of its input context. As illustrated in Figure 5, changing the position of relevant information in the input context leads to substantial decreases in model performance. In particular, we see a distinctive U-\n\n---\n⁶We use the 0613 OpenAI model versions.\n⁷We also evaluate GPT-4 (8K) on a subset of multi-document QA experiments, finding similar results and trends as other models (though GPT-4 has higher absolute performance). Evaluating GPT-4 on the full multi-document QA and key-value retrieval experiments would cost upwards of $6000. See Appendix D for GPT-4 results and discussion.\nshaped performance curve—models are often much better at using relevant information that occurs at the very beginning (primacy bias) and very end of contexts (recency bias), and suffer degraded performance when forced to use information within the middle of its input context. For example, GPT-3.5-Turbo’s multi-document QA performance can drop by more than 20%—in the worst case, performance in 20- and 30-document settings is lower than performance without any input documents (i.e., closed-book performance, 56.1%). These results indicate that current models cannot effectively reason over their entire context window when prompted for downstream tasks.\nExtended-context models are not necessarily better at using input context. When the input context fits in the context window of both a model and its extended-context counterpart, we see that performance between them is nearly identical. For example, the 10- and 20-document settings both fit in the context window of GPT-3.5-Turbo and GPT-3.5-Turbo (16K), and we observe that their performance as a function of position of relative information is nearly superimposed (solid purple and dashed brown series in Figure 5). These results\nindicate that extended-context models are not necessarily better than their non-extended counterparts at using their input context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "2.3 Results and Discussion",
      "chunk_title": "Introduction and U-Shaped Performance Curve",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "99dfe977-c60c-4366-8bb4-ee6227a65c3f",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 3 How Well Can Language Models Retrieve From Input Contexts? > Figure 6: Key-Value Retrieval Task Example",
      "content": "[Image showing an example of a key-value retrieval task with an input context and the desired model output.]\n\nFigure 6: Example of the key-value retrieval task, with an input context and the desired model output. Given a key, the goal is to return the associated value. All keys and values are 128-bit UUIDs. The relevant key-value pair for answering the query is bolded here within the input context for clarity.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "3 How Well Can Language Models Retrieve From Input Contexts?",
      "chunk_title": "Figure 6: Key-Value Retrieval Task Example",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "5493aaa7-53f2-4dbc-8da1-4b891b5a6a50",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 3 How Well Can Language Models Retrieve From Input Contexts? > Introduction to Key-Value Retrieval Task",
      "content": "much natural language semantics as possible (using random UUIDs instead), since language features may present potential confounders. For example, Transformer language models may have varying sensitivity to different linguistic features in their input (O’Connor and Andreas, 2021).\n\n3 How Well Can Language Models Retrieve From Input Contexts?\n\nGiven that language models struggle to retrieve and use information from the middle of their input contexts in the multi-document question answering task, to what extent can they simply retrieve from input contexts? We study this question with a synthetic key-value retrieval task, which is designed to provide a minimal testbed for the basic ability to retrieve matching tokens from an input context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "3 How Well Can Language Models Retrieve From Input Contexts?",
      "chunk_title": "Introduction to Key-Value Retrieval Task",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "e189b6ca-375a-49f3-b202-3c9371a46ba1",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 3 How Well Can Language Models Retrieve From Input Contexts? > 3.1 Experimental Setup",
      "content": "3.1 Experimental Setup\n\nIn our synthetic key-value retrieval task, the inputs are (i) a string-serialized JSON object with k key-value pairs, where each of the keys and values are unique, randomly-generated UUIDs and (ii) a key within the aforementioned JSON object. The goal is to return the value associated with the specified key. Thus, each JSON object contains one relevant key-value pair (where the value is to be returned), and k − 1 irrelevant “distractor” key-value pairs. Figure 6 provides an example input context and the corresponding desired output. We again measure accuracy by evaluating whether the correct value appears in the predicted output.\n\nOur synthetic key-value retrieval task shares similar goals with the Little Retrieval Test of Papailiopoulos et al. (2023) and the fine-grained line-retrieval task of Li et al. (2023), but we explicitly seek to distill and simplify the task by removing as\nTo modulate the position of relevant information within the input context, we change the position of the key to retrieve within the serialized JSON object. To modulate the input context length, we change the number of input JSON key-value pairs k by adding or removing random keys, changing the number of distractor key-value pairs.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "3 How Well Can Language Models Retrieve From Input Contexts?",
      "chunk_title": "3.1 Experimental Setup",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "6c954041-d752-44ee-84c3-e554daeb532a",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 3 How Well Can Language Models Retrieve From Input Contexts? > 3.2 Results and Discussion",
      "content": "3.2 Results and Discussion\n\nWe experiment with input contexts containing 75, 140, and 300 key-value pairs (500 examples each). We use the same set of models as the multi-document question answering experiments, see §2.2 for more details.\n\nFigure 7 presents key-value retrieval performance. Claude-1.3 and Claude-1.3 (100K) do nearly perfectly on all evaluated input context lengths, but other models struggle, especially when contexts have 140 or 300 key-value pairs—although the synthetic key-value retrieval task only requires identifying exact matches within the input context, not all models achieve high performance.\n\nSimilar to our multi-document QA results, GPT-3.5-Turbo, GPT-3.5-Turbo (16K), and MPT-30B-Instruct have the lowest performance when they must access key-value pairs in the middle of their input context. LongChat-13B (16K) exhibits a different trend in the 140 key-value setting; we qualitatively observe that when relevant information is",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "3 How Well Can Language Models Retrieve From Input Contexts?",
      "chunk_title": "3.2 Results and Discussion",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "f5b778d8-5ad8-4949-94b5-6b1de6638f1b",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 3 How Well Can Language Models Retrieve From Input Contexts? > Figure 7: Effect of Key Position on Key-Value Retrieval Performance",
      "content": "[Image of three line graphs showing accuracy vs. position of key to retrieve for 75, 140, and 300 key-value pairs.]\n\nFigure 7: The effect of changing the input context length and the position of relevant information on key-value retrieval performance. Lower positions are closer to the start of the input context. Although some models show perfect accuracy on this synthetic task (e.g., Claude-1.3 and Claude-1.3 (100K)), we see again that performance is often highest when relevant information is occurs at the very start or end of the context, and rapidly degrades when models must retrieve from the middle of the input context.\nplaced at the start of the input context, LongChat-13B (16K) tends to generate code to retrieve the key, rather than outputting the value directly.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "3 How Well Can Language Models Retrieve From Input Contexts?",
      "chunk_title": "Figure 7: Effect of Key Position on Key-Value Retrieval Performance",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "78ba19b4-a69d-4128-a7c9-643b5c698dbd",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information? > Introduction",
      "content": "4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information?\n\nOur multi-document question answering and key-value retrieval results show that language models struggle to robustly access and use information in long input contexts, since performance degrades significantly when changing the position of relevant information. To better understand why, we perform some preliminary investigations into the role of model architecture (decoder-only vs. encoder-decoder), query-aware contextualization, and instruction fine-tuning.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information?",
      "chunk_title": "Introduction",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "09422bb6-92f1-4059-8eb2-bea9a2a9ef5e",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information? > 4.1 Effect of Model Architecture",
      "content": "4.1 Effect of Model Architecture\n\nThe open models we evaluated are all decoder-only models—at each timestep, they may only attend to prior tokens. To better understand the potential effects of model architecture on how language model use context, we compare decoder-only and encoder-decoder language models.\n\nWe experiment with Flan-T5-XXL (Raffel et al., 2020; Chung et al., 2022) and Flan-UL2 (Tay et al., 2023). Flan-T5-XXL is trained with sequences of 512 tokens (encoder and decoder). Flan-UL2 is initially trained with sequences of 512 tokens (encoder and decoder), but is then pre-trained for an extra 100B steps with 2024 tokens (encoder and decoder) before instruction fine-tuning on sequences with 2048 tokens in the encoder and 512 tokens in the decoder. However, since these models use\nrelative positional embeddings, they can (in principle) extrapolate beyond these maximum context lengths; Shaham et al. (2023) find that both models can perform well with sequences of up to 8K tokens.\n\nFigure 8 compares the performance of decoder-only and encoder-decoder models. When Flan-UL2 is evaluated on sequences within its 2048-token training time context window (Figure 8, left sub-plot), its performance is relatively robust to changes in the position of relevant information within the input context (1.9% absolute difference between best- and worst-case performance). When evaluated in settings with sequence longer than 2048 tokens (Figure 8, center and right), Flan-UL2 performance begins to degrade when relevant information is placed in the middle. Flan-T5-XXL shows a similar trend, where longer input contexts result in a greater performance degradation when placing relevant information in the middle of the input context. We hypothesize that encoder-decoder models may make better use of their context windows because their bidirectional encoder allows processing each document in the context of future documents, potentially improving relative importance estimation between documents.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information?",
      "chunk_title": "4.1 Effect of Model Architecture",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "0f9db55a-153e-4bfd-acb9-586b56ce8a82",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information? > 4.2 Effect of Query-Aware Contextualization",
      "content": "4.2 Effect of Query-Aware Contextualization\n\nOur multi-document QA and key-value retrieval experiments place the query (i.e., question to answer or key to retrieve) after the data to process (i.e., the documents or the key-value pairs). As a result, decoder-only models cannot attend to query tokens when contextualizing documents or key-value pairs, since the query only appears at the end",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information?",
      "chunk_title": "4.2 Effect of Query-Aware Contextualization",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "79bd2c74-4abd-48ea-861b-b17760367417",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information? > 4.1 Effect of Model Architecture",
      "content": "[Image of three line graphs showing accuracy vs. position of document with the answer for encoder-decoder models.]\n\nFigure 8: When encodes-decoder models (Flan-UL2 and Flan-T5-XXL) evaluated on sequences that are shorter than their encoder’s training-time maximum sequence length (2048 and 512 tokens, respectively), they are relatively robust to changes in the position of relevant information within their input context (left subplot). In contrast, when these models are evaluated on sequences longer than those seen during training (center and right subplots), we observe a U-shaped performance curve—performance is higher when relevant information occurs at the beginning or end of the input context, as opposed to the middle of the input context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information?",
      "chunk_title": "4.1 Effect of Model Architecture",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "31ea100c-c343-44e1-8497-68d71d607429",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information? > 4.2 Effect of Query-Aware Contextualization",
      "content": "[Image of a line graph showing accuracy vs. position of document with the answer for query-aware contextualization.]\n\nFigure 9: Query-aware contextualization (placing the query before and after the documents) does not substantially improve robustness of language models to changing the position of relevant information in multi-document QA—performance slightly increases when relevant information occurs at the very beginning, but otherwise slightly decreases.\nof the prompt and decoder-only models can only attend to prior tokens at each timestep. In contrast, encoder-decoder models (which seem more robust to changes in the position of relevant information; §4.1) use a bidirectional encoder to contextualize input contexts—can we use this observation to improve decoder-only models by placing the query before and after the data, enabling query-aware contextualization of documents (or key-value pairs)?\n\nWe find that query-aware contextualization dramatically improves performance on the key-value retrieval task—all models achieve near-perfect performance on the 75, 140, and 300 key-value pair settings. For example, GPT-3.5-Turbo (16K) with query-aware contextualization achieves perfect performance when evaluated with 300 key-value pairs.\n\nIn contrast, without query-aware contextualization, the worst-case performance is 45.6% (Figure 7). Despite the significant impact on key-value retrieval performance, query-aware contextualization minimally affects performance trends in the multi-document question answering task (Figure 9); it slightly improves performance when the relevant information is located at the very beginning of the input context, but slightly decreases performance in other settings.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information?",
      "chunk_title": "4.2 Effect of Query-Aware Contextualization",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "df2cc955-f8d4-4f45-90d5-d8e302412259",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information? > 4.3 Effect of Instruction Fine-Tuning",
      "content": "4.3 Effect of Instruction Fine-Tuning\n\nThe models we evaluated are all instruction fine-tuned—after their initial pre-training, they undergo supervised fine-tuning on a dataset of instructions and responses. The task specification and/or instruction is commonly placed at the beginning of the input context in supervised instruction fine-tuning data, which might lead instruction fine-tuned language models to place more weight on the start of the input context. To better understand the potential effects of instruction fine-tuning on how language models use long input contexts, we compare the multi-document question answering performance of MPT-30B-Instruct against its base model (i.e., before instruction fine-tuning), MPT-30B. We use the same experimental setup as §2.\n\nFigure 10 compares the multi-document QA performance of MPT-30B and MPT-30B-Instruct as a function of the position of the relevant in-",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information?",
      "chunk_title": "4.3 Effect of Instruction Fine-Tuning",
      "page_numbers": [
        8
      ]
    },
    {
      "id": "016fd9e5-e670-4403-b88a-49a2e6f3bf42",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information? > Figure 10: Multi-document QA performance of MPT-30B and MPT-30B-Instruct",
      "content": "[Image of a line graph with \"Accuracy\" on the y-axis (from 44 to 56) and \"Position of Document with the Answer\" on the x-axis (1st, 5th, 10th, 15th, 20th). Two lines are plotted: \"mpt-30b\" and \"mpt-30b-instruct\". Both lines show a U-shaped curve, with higher accuracy at the 1st and 20th positions and lower accuracy in the middle positions. The \"mpt-30b-instruct\" line is consistently higher than the \"mpt-30b\" line.]\n\nFigure 10: Multi-document QA performance of MPT-30B and MPT-30B-Instruct compared against its base model (i.e., before instruction fine-tuning). Both models have a U-shaped performance curve, where performance is much higher when relevant information occurs at the start or end of the input context, indicating that the instruction fine-tuning process itself is not necessarily responsible for these performance trends.\nformation in the input context. Surprisingly, we see that both MPT-30B and MPT-30B-Instruct exhibit a U-shaped performance curve, where performance is highest when relevant information occurs at the very beginning or very end of the context. Although the absolute performance of MPT-30B-Instruct is uniformly higher than that of MPT-30B, their overall performance trends are similar. We also observe that instruction fine-tuning slightly reduces the worst-case performance disparity from nearly 10% between the base model best- and worst-case performance to around 4%.\n\nThese observations complement prior work, which found that non-instruction fine-tuned language models are biased towards recent tokens (i.e., the end of the input context; Khandelwal et al., 2018; Press et al., 2021). This recency bias has been observed in past work when evaluating models on next-word prediction of contiguous text, a setting where language models minimally benefit from long-range information (Sun et al., 2021). In contrast, our results show that language models are capable of using longer-range information (i.e., the beginning of the input context) when prompted with instruction-formatted data. We hypothesize that non-instruction fine-tuned language models learn to use these long contexts from similarly-formatted data that may occur in Internet text seen during pre-training, e.g., StackOverflow questions and answers.\n\nTo better understand the effect of additional fine-tuning and model scale, we also experimented with Llama-2 models of varying sizes (7B, 13B, and 70B) with and without additional supervised fine-tuning and reinforcement learning from human feedback (Appendix E). We find that the U-shaped performance curve only appears in sufficiently large language models (with or without additional fine-tuning)—the 7B Llama-2 model is solely recency-biased, while the 13B and 70B models exhibit a U-shaped performance curve. In addition, we see that the Llama-2 supervised fine-tuning and reinforcement learning from human feedback procedure slightly mitigates the positional bias in smaller models (13B, akin to trends shown when comparing MPT-30B and MPT-30B-Instruct), but minimally affects trends on larger models (70B).",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "4 Why Are Language Models Not Robust to Changes in the Position of Relevant Information?",
      "chunk_title": "Figure 10: Multi-document QA performance of MPT-30B and MPT-30B-Instruct",
      "page_numbers": [
        9,
        10
      ]
    },
    {
      "id": "5bdf8757-78e1-43b9-90b8-da147058995f",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 5 Is More Context Is Always Better? A Case Study with Open-Domain QA > Introduction and Methodology",
      "content": "**5 Is More Context Is Always Better? A Case Study with Open-Domain QA**\n\nOur results indicate that prompting language models with longer input contexts is a trade-off—providing the language model with more information may help it perform the downstream task, but it also increases the amount of context that the model must reason over, potentially decreasing accuracy. Even if a language model can take in 16K tokens, is it actually beneficial to provide 16K tokens of context? The answer to this question is ultimately downstream task-specific, since it depends on the marginal value of the added context and the model’s ability to effectively use long input contexts. We perform a case study with open-domain question answering on NaturalQuestions-Open to better understand this trade-off in existing language models.\n\nWe use language models in a standard retriever-reader setup. A retrieval system (Contriever, fine-tuned on MS-MARCO) takes an input query from NaturalQuestions-Open and returns the k documents from Wikipedia with the highest relevance score. In-context language models are then retrieved documents, we simply include them in the prompt. We evaluate retriever recall and reader accuracy (whether any of the annotated answers appear in the predicted output) as a function of the number of retrieved documents k. We use a subset of NaturalQuestions-Open where the long answer is a paragraph (as opposed to a table or a list).\n\nFigure 11 presents retriever recall and open-",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "5 Is More Context Is Always Better? A Case Study with Open-Domain QA",
      "chunk_title": "Introduction and Methodology",
      "page_numbers": [
        11
      ]
    },
    {
      "id": "66b19606-c849-4e6c-86e4-97d0e8522445",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 5 Is More Context Is Always Better? A Case Study with Open-Domain QA > Figure 11: Retriever Recall and Model Performance vs. Number of Documents",
      "content": "[Image of a line graph with \"Metric\" on the y-axis (from 50 to 90) and \"Number of Retrieved Docs\" on the x-axis (5, 10, 20, 30, 50). Several lines are plotted for different models (claude-1.3, claude-1.3-100k, gpt-3.5-turbo-0613, gpt-3.5-turbo-16k-0613, mpt-30b-instruct, longchat-13b-16k) and one for \"Contriever Recall\". The model performance lines are clustered between 50 and 65 and are relatively flat, while the \"Contriever Recall\" line rises steeply from around 60 to over 90.]\n\nFigure 11: Retriever recall and model performance as a function of the number of retrieved documents. Model performance saturates long before retriever recall, indicating that the models have difficulty making use of the extra retrieved documents.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "5 Is More Context Is Always Better? A Case Study with Open-Domain QA",
      "chunk_title": "Figure 11: Retriever Recall and Model Performance vs. Number of Documents",
      "page_numbers": [
        12
      ]
    },
    {
      "id": "11055a11-b647-49bb-8d2b-2d03aaa3434f",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 5 Is More Context Is Always Better? A Case Study with Open-Domain QA > Analysis of Results",
      "content": "domain QA results. We see that reader model performance saturates long before retriever performance saturates, indicating that readers are not effectively using the extra context. Using more than 20 retrieved documents only marginally improves reader performance (< 3.5% for GPT-3.5-Turbo and < 1% for Claude-1.3), while significantly increasing the input context length (and thus latency and cost). These results, coupled with the observation that models are often better at retrieving and using information at the start or end of the input context, suggest that effective re-ranking of retrieved documents (pushing relevant information closer to the start of the input context) or ranked list truncation (retrieving fewer documents when appropriate; Arampatzis et al., 2009) may be promising directions for improving how language-model-based readers use retrieved context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "5 Is More Context Is Always Better? A Case Study with Open-Domain QA",
      "chunk_title": "Analysis of Results",
      "page_numbers": [
        12
      ]
    },
    {
      "id": "75131f34-31b8-45ff-b492-4054eedcbff0",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 6 Related Work > 6.1 Long-Context Language Models",
      "content": "**6 Related Work**\n\n**6.1 Long-Context Language Models**\n\nThere is much prior work in designing performant language models with cheaper scaling than Transformers in the context length. Many lines of work pursue Transformer variants with attention modifications like recurrence (Dai et al., 2019), factorizing attention into computationally less intensive approximations (Beltagy et al., 2020; Zaheer et al., 2020), or low-rank approximations (Wang et al., 2020; Peng et al., 2021). Dao et al. (2022) instead provide a faster exact attention by a carefully-crafted IO-aware CUDA kernel. Separately, there are attempts to do away with attention entirely to remove quadratic sequence length complexity, often through convolution and/or linear RNNs, e.g., in RWKV (Peng, 2023), S4 (Gu et al., 2022), or Hyena (Poli et al., 2023). Many prior efforts evaluate perplexity on a diverse web corpus as a proxy for the ability to process long contexts; this work shows that precise knowledge access on long contexts may be an added challenge.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "6 Related Work",
      "chunk_title": "6.1 Long-Context Language Models",
      "page_numbers": [
        12
      ]
    },
    {
      "id": "67a15dd4-c3ef-4eb4-a178-2477ce6c7ae0",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 6 Related Work > 6.2 How Do Language Models Use Context?",
      "content": "**6.2 How Do Language Models Use Context?**\n\nThe pioneering work of Khandelwal et al. (2018) showed that small LSTM language models make increasingly coarse use of longer-term context; Sankar et al. (2019) found similar results in dialogue models. In a similar vein, Daniiluk et al. (2017) find that attentive LSTM language models tend to mainly use recent history. Petroni et al. (2020) were among the first to demonstrate the potential of combining context from an information retrieval system with a pretrained language model for unsupervised question answering. O’Connor and Andreas (2021) found that many information-destroying operations had marginal effects on Transformer LMs’ predictions. Krishna et al. (2022) found that long-context text generation in modestly-sized Transformer language models degenerates because models fail to properly condition on long context. Finally, studying long-context models, Sun et al. (2021) found that longer contexts improve prediction of only a few tokens, an empirical finding consistent with the theory of Sharan et al. (2018), who showed that sequence distributions with bounded mutual information necessarily lead to marginal average prediction benefits from increasingly long context. Qin et al. (2023) analyze how efficient Transformers perform on a variety of long-context downstream NLP tasks, finding that long-context transformers are recency-biased and do not effectively use long-range context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "6 Related Work",
      "chunk_title": "6.2 How Do Language Models Use Context?",
      "page_numbers": [
        12
      ]
    },
    {
      "id": "9a5c26be-fab1-4cd5-b7b4-c925b832dc3e",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 6 Related Work > 6.3 The Serial-Position Effect",
      "content": "**6.3 The Serial-Position Effect**\n\nThe U-shaped curve we observe in this work has a connection in psychology known as the serial-position effect (Ebbinghaus, 1913; Murdock Jr, 1962), that states that in free-association recall of elements from a list, humans tend to best remember the first and last elements of the list. The serial-position effect plays a role in understanding how humans develop short- and long-term mem-\nory. Observing a serial-position-like effect in language models is perhaps surprising, since the self-attention mechanisms underlying Transformer language models is technically equally capable of retrieving any token from their contexts.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "6 Related Work",
      "chunk_title": "6.3 The Serial-Position Effect",
      "page_numbers": [
        12
      ]
    },
    {
      "id": "e700928d-5a94-40cb-a2cc-2a6d2636e3ba",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > 7 Conclusion > Summary of Findings",
      "content": "**7 Conclusion**\n\nWe empirically study how language models use long input contexts via a series of controlled experiments. We show that language model performance degrades significantly when changing the position of relevant information, indicating that models struggle to robustly access and use information in long input contexts. In particular, performance is often lowest when models must use information in the middle of long input contexts. We conduct a preliminary investigation of the role of (i) model architecture, (ii) query-aware context utilization, and (iii) instruction fine-tuning to better understand how they affect how language models use context. Finally, we conclude with a practical case study of open-domain question answering, finding that the performance of language model readers saturates far before retriever recall. Our results and analysis provide a better understanding of how language models use their input context and provides new evaluation protocols for future long-context models.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "7 Conclusion",
      "chunk_title": "Summary of Findings",
      "page_numbers": [
        12
      ]
    },
    {
      "id": "d60ffd48-634b-48b1-880a-22e267c46bd8",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Acknowledgments > Acknowledgments",
      "content": "**Acknowledgments**\n\nWe would like to thank Luke Zettlemoyer, who served as our TACL action editor, and the the anonymous reviewers for their comments and feedback. We also thank Claudio Lo-veannce Condrei, Megan Leszczynski, Dmytro Okhonko, Maithra Raghu, Eric Wallace and Sang Michael Xie for feedback and discussions that helped improve this work. Further, we are grateful to Sewon Min for her help with the AmbigQA dataset. This work was supported by the Stanford Center for Research on Foundation Models (CRFM), by OpenAI via an API credits grant to the Stanford CRFM, and by Anthropic via the Claude academic access program.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Acknowledgments",
      "chunk_title": "Acknowledgments",
      "page_numbers": [
        12
      ]
    },
    {
      "id": "85e97868-b128-440b-972d-00a254d90c0a",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > References > References (Page 3)",
      "content": "**References**\n\nAvi Arampatzis, Jaap Kamps, and Stephen Robertson. 2009. Where to stop reading a ranked list? threshold optimization using truncated score distributions. In *Proc. of SIGIR*.\n\nIz Beltagy, Matthew E. Peters, and Arman Cohan. 2020. Longformer: The long-document transformer. arXiv:2004.05150.\n\nHyung Won Chung, Le Hou, Shayne Longpre, Barret Zoph, Yi Tay, William Fedus, Yunxuan Li, Xuezhi Wang, Mostafa Dehghani, Siddhartha Brahma, Albert Webson, Shixiang Shane Gu, Zhuyun Dai, Mirac Suzgun, Xinyun Chen, Aakanksha Chowdhery, Alex Castro-Ros, Marie Pellat, Kevin Robinson, Dasha Valter, Sharan Narang, Gaurav Mishra, Adams Yu, Vincent Zhao, Yanping Huang, Andrew Dai, Hongkun Yu, Slav Petrov, Ed H. Chi, Jeff Dean, Jacob Devlin, Adam Roberts, Denny Zhou, Quoc V. Le, and Jason Wei. 2022. Scaling instruction-finetuned language models. arXiv:2210.11416.\n\nZihang Dai, Zhilin Yang, Yiming Yang, Jaime Carbonell, Quoc Le, and Ruslan Salakhutdinov. 2019. Transformer-xl: Attentive language models beyond a fixed-length context. In *Proc. of ACL*.\n\nMichal Daniluk, Tim Rocktäschel, Johannes Welbl, and Sebastian Riedel. 2017. Frustratingly short attention spans in neural language modeling. In *Proc. of ICLR*.\n\nTri Dao, Daniel Y. Fu, Stefano Ermon, Atri Rudra, and Christopher Ré. 2022. FlashAttention: Fast and memory-efficient exact attention with IO-awareness. arXiv:2205.14135.\n\nHermann Ebbinghaus. 1913. Memory: A contribution to experimental psychology. H. A. Ruger & C. E. Bussenius, Trans.\n\nAlbert Gu, Karan Goel, and Christopher Ré. 2022. Efficiently modeling long sequences with structured state spaces. In *Proc. of ICLR*.\n\nMaor Ivgi, Uri Shaham, and Jonathan Berant. 2023. Efficient long-text understanding with short-text models. *Transactions of the Association for Computational Linguistics*, 11:284–299.\n\nGautier Izacard, Mathilde Caron, Lucas Hosseini, Sebastian Riedel, Piotr Bojanowski, Armand Joulin, and Edouard Grave. 2021. Unsupervised dense information retrieval with contrastive learning. arXiv:2112.09118.\n\nGautier Izacard and Edouard Grave. 2021. Leveraging passage retrieval with generative models\nfor open domain question answering. In *Proc. of EACL*.\n\nNikhil Kandpal, Haikang Deng, Adam Roberts, Eric Wallace, and Colin Raffel. 2022. Large language models struggle to learn long-tail knowledge. arXiv:2211.08411.\n\nUrvashi Khandelwal, He He, Peng Qi, and Dan Jurafsky. 2018. Sharp nearby, fuzzy far away: How neural language models use context. In *Proc. of ACL*.\n\nKalpesh Krishna, Yapei Chang, John Wieting, and Mohit Iyyer. 2022. RankGen: Improving text generation with large ranking models. In *Proc. of EMNLP*.\n\nTom Kwiatkowski, Jennimaria Palomaki, Olivia Redfield, Michael Collins, Ankur Parikh, Chris Alberti, Danielle Epstein, Illia Polosukhin, Jacob Devlin, Kenton Lee, Kristina Toutanova, Llion Jones, Matthew Kelcey, Ming-Wei Chang, Andrew M. Dai, Jakob Uszkoreit, Quoc Le, and Slav Petrov. 2019. Natural Questions: A benchmark for question answering research. *Transactions of the Association for Computational Linguistics*, 7:453–466.\n\nKenton Lee, Ming-Wei Chang, and Kristina Toutanova. 2019. Latent retrieval for weakly supervised open domain question answering. In *Proc. of ACL*.\n\nMina Lee, Percy Liang, and Qian Yang. 2022. CoAuthor: Designing a human-AI collaborative writing dataset for exploring language model capabilities. In *Proc. of CHI*.\n\nDacheng Li, Rulin Shao, Anze Xie, Ying Sheng, Lianmin Zheng, Joseph E. Gonzalez, Ion Stoica, Xuezhe Ma, and Hao Zhang. 2023. How long can open-source LLMs truly promise on context length?\n\nAlex Mallen, Akari Asai, Victor Zhong, Rajarshi Das, Daniel Khashabi, and Hannaneh Hajishirzi. 2023. When not to trust language models: Investigating effectiveness of parametric and non-parametric memories. In *Proc. of ACL*.\n\nSewon Min, Julian Michael, Hannaneh Hajishirzi, and Luke Zettlemoyer. 2020. AmbigQA: Answering ambiguous open-domain questions. In *Proc. of EMNLP*.\n\nBennet B. Murdock Jr. 1962. The serial position effect of free recall. *Journal of experimental psychology*, 64(5):482.\n\nJoe O’Connor and Jacob Andreas. 2021. What context features can Transformer language models use? In *Proc. of ACL*.\n\nDimitris Papailiopoulos, Kangwook Lee, and Juyong Sohn. 2023. A little retrieval test for large language models. https://github.com/anadim/the-little-retrieval-test.\n\nBo Peng. 2023. RWKV-LM. https://github.com/BlinkDL/RWKV-LM.\n\nHao Peng, Nikolaos Pappas, Dani Yogatama, Roy Schwartz, Noah Smith, and Lingpeng Kong. 2021. Random feature attention. In *Proc. of ICLR*.\n\nFabio Petroni, Patrick Lewis, Aleksandra Piktus, Tim Rocktäschel, Yuxiang Wu, Alexander H Miller, and Sebastian Riedel. 2020. How context affects language models’ factual predictions. In *Proc. of AKBC*.\n\nMichael Poli, Stefano Massaroli, Eric Nguyen, Daniel Y. Fu, Tri Dao, Stephen Baccus, Yoshua Bengio, Stefano Ermon, and Christopher Ré. 2023. Hyena hierarchy: Towards larger convolutional language models. In *Proc. of ICLR*.\n\nOfir Press, Noah A. Smith, and Mike Lewis. 2021. Shorterformer: Better language modeling using shorter inputs. In *Proc. of ACL*.\n\nOfir Press, Noah A. Smith, and Mike Lewis. 2022. Train short, test long: Attention with linear biases enables input length extrapolation. In *Proc. of ICLR*.\n\nGuanghui Qin, Yukun Feng, and Benjamin Van Durme. 2023. The NLP task effectiveness of long-range transformers. In *Proc. of EACL*.\n\nColin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. 2020. Exploring the limits of transfer learning with a unified text-to-text Transformer. *Journal of Machine Learning Research*, 21(140):1–67.\nOri Ram, Yoav Levine, Itay Dalmedigos, Dor Muhlgay, Amnon Shashua, Kevin Leyton-Brown, and Yoav Shoham. 2023. In-context retrieval-augmented language models. arXiv:2302.00083.\n\nOhad Rubin and Jonathan Berant. 2023. Long-range language modeling with self-retrieval. arXiv:2306.13421.\n\nChinnadhurai Sankar, Sandeep Subramanian, Chris Pal, Sarath Chandar, and Yoshua Bengio. 2019. Do neural dialog systems use the conversation history effectively? an empirical study. In *Proc. of ACL*.\n\nTimo Schick, Jane Dwivedi-Yu, Roberto Dessì, Roberta Raileanu, Maria Lomeli, Luke Zettle-moyer, Nicola Cancedda, and Thomas Scialom. 2023. Toolformer: Language models can teach themselves to use tools.\n\nUri Shaham, Maor Ivgi, Avia Efrat, Jonathan Be-rant, and Omer Levy. 2023. ZeroSCROLLS: A zero-shot benchmark for long text understanding. arXiv:2305.14196.\n\nVatsal Sharan, Sham Kakade, Percy Liang, and Gregory Valiant. 2018. Prediction with a short memory. In *Proc. of STOC*.\n\nWeijia Shi, Sewon Min, Michihiro Yasunaga, Min-joon Seo, Rich James, Mike Lewis, Luke Zettle-moyer, and Wen tau Yih. 2023. REPLUG: Retrieval-augmented black-box language mod-els. arXiv:2301.12652.\n\nKurt Shuster, Jing Xu, Mojtaba Komeili, Da Ju, Eric Michael Smith, Stephen Roller, Megan Ung, Moya Chen, Wishal Arora, Joshua Lane, Morteza Behrooz, William Ngan, Spencer Poff, Naman Goyal, Arthur Szlam, Y-Lan Boureau, Melanie Kambadur, and Jason Weston. 2022. BlenderBot 3: a deployed conversational agent that continually learns to responsibly engage. arXiv:2208.03188.\n\nSimeng Sun, Kalpesh Krishna, Andrew Mattarella-Micke, and Mohit Iyyer. 2021. Do long-range language models actually use long-range con-text? In *Proc. of EMNLP*.\n\nYi Tay, Mostafa Dehghani, Vinh Q. Tran, Xavier Garcia, Jason Wei, Xuezhi Wang, Hyung Won Chung, Siamak Shakeri, Dara Bahri, Tal Schuster, Huaixiu Steven Zheng, Denny Zhou, Neil Houlsby, and Donald Metzler. 2023. UL2: Unifying language learning paradigms. arXiv:2205.05131.\n\nRomal Thoppilan, Daniel De Freitas, Jamie Hall, Noam Shazeer, Apoorv Kulshreshtha, Heng-Tze Cheng, Alicia Jin, Taylor Bos, Leslie Baker, Yu Du, YaGuang Li, Hongrae Lee, Huaixiu Steven Zheng, Amin Ghafouri, Marcelo Menegali, Yanping Huang, Maxim Krikun, Dmitry Lepikhin, James Qin, Dehao Chen, Yuanzhong Xu, Zhifeng Chen, Adam Roberts, Maarten Bosma, Vincent Zhao, Yanqi Zhou, Chung-Ching Chang, Igor Krivokon, Will Rusch, Marc Pickett, Pranesh Srinivasan, Laichee Man, Kathleen Meier-Hellstern, Meredith Ringel Mor-ris, Tulsee Doshi, Renelito Delos Santos, Toju Duke, Johnny Soraker, Ben Zevenbergen, Vin-odkumar Prabhakaran, Mark Diaz, Ben Hutchin-son, Kristen Olson, Alejandra Molina, Erin Hoffman-John, Josh Lee, Lora Aroyo, Ravi Rajakumar, Alena Butryna, Matthew Lamm, Viktoriya Kuzmina, Joe Fenton, Aaron Cohen, Rachel Bernstein, Ray Kurzweil, Blaise Aguera Arcas, Claire Cui, Marian Croak, Ed Chi, and Quoc Le. 2022. LaMDA: Language models for dialog applications. arXiv:2201.08239.\n\nHugo Touvron, Thibaut Lavril, Gautier Izac-ard, Xavier Martinet, Marie-Anne Lachaux, Timothée Lacroix, Baptiste Rozière, Naman Goyal, Eric Hambro, Faisal Azhar, Aurelien Rodriguez, Armand Joulin, Edouard Grave, and Guillaume Lample. 2023a. LLaMA: Open and efficient foundation language models. arXiv:2302.13971.\n\nHugo Touvron, Louis Martin, Kevin Stone, Pe-ter Albert, Amjad Almahairi, Yasmine Babaei, Nikolay Bashlykov, Soumya Batra, Prajjwal Bhargava, Shruti Bhosale, Dan Bikel, Lukas Blecher, Cristian Canton Ferrer, Moya Chen, Guillem Cucurull, David Esiobu, Jude Fernan-des, Jeremy Fu, Wenyin Fu, Brian Fuller, Cyn-thia Gao, Vedanuj Goswami, Naman Goyal, An-thony Hartshorn, Saghar Hosseini, Rui Hou, Hakan Inan, Marcin Kardas, Viktor Kerkez, Madian Khabsa, Isabel Kloumann, Artem Ko-telyev, Punit Singh Koura, Marie-Anne Lachaux, Thibaut Lavril, Jenya Lee, Diana Liskovich, Yinghai Lu, Yuning Mao, Xavier Martinet, Todor Mihaylov, Pushkar Mishra, Igor Molybog, Yixin\nNie, Andrew Poulton, Jeremy Reizenstein, Rashi Rungta, Kalyan Saladi, Alan Schelten, Ruan Silva, Eric Michael Smith, Ranjan Subramanian, Xiaoqing Ellen Tan, Binh Tang, Ross Taylor, Adina Williams, Jian Xiang Kuan, Puxin Xu, Zheng Yan, Iliyan Zarov, Yuchen Zhang, An-gela Fan, Melanie Kambadur, Sharan Narang, Aurelien Rodriguez, Robert Stojnic, Sergey Edunov, and Thomas Scialom. 2023b. Llama 2: Open foundation and fine-tuned chat models. arXiv:2307.09288.\n\nAshish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N. Gomez, Łukasz Kaiser, and Illia Polosukhin. 2017. At-tention is all you need. In *Proc. of NeurIPS*.\n\nSinong Wang, Belinda Z. Li, Madian Khabsa, Han Fang, and Hao Ma. 2020. Lin-former: Self-attention with linear complexity. arXiv:2006.04768.\n\nManzil Zaheer, Guru Guruganesh, Kumar Avinava Dubey, Joshua Ainslie, Chris Alberti, Santiago Ontanon, Philip Pham, Anirudh Ravula, Qifan Wang, Li Yang, and Amr Ahmed. 2020. Big Bird: Transformers for longer sequences. In *Proc. of NeurIPS*.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "References",
      "chunk_title": "References (Page 3)",
      "page_numbers": [
        12,
        13,
        14
      ]
    },
    {
      "id": "fb602099-7478-46b6-8e8a-d0a735004575",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > A Ambiguity in Multi-Document QA Distractor Documents",
      "content": "Following past work on NaturalQuestions-Open (Izacard et al., 2021; Izacard and Grave, 2021, inter alia), we use a Wikipedia dump from late 2018 as our retrieval corpus. However, this standard Wikipedia dump has a small amount of temporal mismatch with the NaturalQuestions annotations.\n\nFor example, consider the question “what nfl team does robert griffin iii play for”. The Natu-ralQuestions annotated answer is “currently a free agent”. However, the Wikipedia retrieval corpus contains the information that he plays for the “Balti-more Ravens”, since he was released from the team between the Wikipedia dump’s timestamp and the NaturalQuestions annotation process.\n\nWe use the ambiguity annotations of Min et al. (2020) to create a subset unambiguous questions. Experiments on this unambiguous subset of the data show similar results and conclusions as the experiments on the full questions collection (Fig-ure 12).",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "A Ambiguity in Multi-Document QA Distractor Documents",
      "page_numbers": [
        15
      ]
    },
    {
      "id": "abc48a04-c603-4dd7-9d2f-f490cbb8462b",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Figure 12: Language model performance on an unambiguous subset of questions",
      "content": "Figure 12: Language model performance on a unam-biguous subset of questions.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Figure 12: Language model performance on an unambiguous subset of questions",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "907eeffa-7742-4998-82f4-b0514172aca2",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > B Random Distractors in Multi-Document QA",
      "content": "We also run multi-document question answering experiments with random Wikipedia documents as distractors, which allows us to ablate the impact of retrieved distractors (hard negatives). Note that in this setting, the the document containing the an-swer can often be identified with simple heuristics (e.g., lexical overlap with the query). Figure 13 presents the results of this experiment. Although all models have higher absolute accuracy in this setting, they surprisingly still struggle to reason over their entire input context, indicating that their performance degradation is not solely due to an inability to identify relevant documents.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "B Random Distractors in Multi-Document QA",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "8a38f69c-e910-43a4-9379-c9692527dafe",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > C Randomizing Distractor Order in Multi-Document QA",
      "content": "Our prompt instructs the language model to use the provided search results to answer the question. There may be a prior in the pre-training or instruc-tion fine-tuning data to treat search results as sorted by decreasing relevance (i.e., the documents near the beginning of the input context are more likely to be useful than those at the end). To validate that our conclusions are not simply a byproduct of this bias, we run experiments with the modified instruction “Write a high-quality answer for the given ques-tion using only the provided search results (some of which might be irrelevant). The search results are ordered randomly.” In addition, we randomly shuffle the k − 1 distractor documents.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "C Randomizing Distractor Order in Multi-Document QA",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "47366320-2897-4be6-b0cf-1b732d6a1d8e",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Figure 13: Language model performance on multi-document QA when using random distractors",
      "content": "Figure 13: Language model performance on multi-document QA when using random distractors, rather than retrieved distractors.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Figure 13: Language model performance on multi-document QA when using random distractors",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "43212bda-6e9c-4413-a899-5a05c7abb61b",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Analysis of Randomized Distractor Order",
      "content": "Figure 14 presents the results of this experiment. We continue to see a U-shaped performance curve, with performance degrading when language mod-els must use information in the middle of their input contexts. Comparing the results in §2.3 with those when randomizing the distractors order and mentioning such in the prompt, we see that ran-domization slightly decreases performance when the relevant information is at the very beginning of the context, and slightly increases performance when using information in the middle and end of the context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Analysis of Randomized Distractor Order",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "79b50772-892b-4910-91fc-3eae2c50aab8",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Figure 14: Language model performance when randomizing the order of the distractors",
      "content": "Figure 14: Language model performance when random-izing the order of the distractors (rather than presenting them in order of decreasing relevance) and mentioning as such in the prompt.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Figure 14: Language model performance when randomizing the order of the distractors",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "a8ca61c8-f3f6-4825-a6ca-8980f5792ea7",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > D GPT-4 Performance",
      "content": "We evaluate GPT-4 (8K) on a subset of 500 ran-dom multi-document QA examples with 20 total documents in each input context (Figure 15). GPT-4 achieves higher absolute performance than any other language model, but still shows a U-shaped performance curve—its performance is highest when relevant information occurs at the very start or end of the context, and performance degrades when it must use information in the middle of its input context.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "D GPT-4 Performance",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "a5f5c7d7-0389-4a42-b327-baad2c475735",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Figure 15: GPT-4 performance on multi-document QA",
      "content": "Figure 15: Although GPT-4 has higher absolute perfor-mance than other models, its performance still degrades when relevant information occurs in the middle of the input context.\nWe evaluate Llama-2 (Touvron et al., 2023b) on multi-document QA with 20 total documents in each input context. The Llama tokenizer pro-duces longer sequences than the tokenizers for our previously-studied models, so we discard 20 exam-\nples (out of 2655) that exceed Llama-2’s maximum context length of 4096 tokens. We experiment with models of varying sizes (7B, 13B, and 70B pa-rameters), with and without additional supervised fine-tuning and reinforcement learning from hu-man feedback (“-chat-” models). The results are presented in Figure 16.\n\nComparing Llama-2 models of varying sizes, we find that only the larger models (13B and 70B) exhibit the U-shaped performance curve (i.e., with primacy and recency bias)—the smallest Llama-2 models (7B) are solely recency-biased. Given these results, we hypothesize that prior work (e.g., Khandelwal et al., 2018; Sun et al., 2021) did not previously observe any primacy bias in language models because the models they studied were too small (less than 1B parameters).\n\nComparing between Llama-2 models with and without additional supervised fine-tuning and re-inforcement learning from human feedback, we see that additional fine-tuning dramatically im-proves performance on the multi-document QA task. The 7B models with and without additional fine-tuning show minimal primacy bias, and are largely recency-biased. The 13B base model has a dramatic primacy and recency bias—there is a 20-point accuracy disparity between the best- and worst-case performance. Applying additional fine-tuning to the 13B seems to slightly reduce this bias (10-point worst-case degradation), but the bias remains significant. However, the 70B models with and without additional fine-tuning have largely similar trends (showing both primacy and recency bias), and additional fine-tuning minimally changes the positional bias severity.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Figure 15: GPT-4 performance on multi-document QA",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "b9b7be0b-4e81-4dc6-b4c9-cfd5fb4ff161",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Figure 16: Multi-document QA performance of Llama-2 models",
      "content": "Figure 16: Multi-document QA performance (20 total documents) of Llama-2 models of varying sizes (7B, 13B, 70B parameters), with and without additional su-pervised fine-tuning and reinforcement learning from human feedback (“-chat-” models).",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Figure 16: Multi-document QA performance of Llama-2 models",
      "page_numbers": [
        16
      ]
    },
    {
      "id": "d256fddb-8419-41ef-8dc8-d41d43226edb",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > F Token Counts",
      "content": "F Token Counts\n\nTable 2, Table 3, and Table 4 present the average and maximum number of tokens in each of the input contexts for all experimental settings. Note that MPT-30B and MPT-30B-Instruct use the same tokenizer, GPT-3.5-Turbo and GPT-3.5-Turbo (16K) use the same tokenizer, and Claude-1.3 and Claude-1.3 (100K) use the same tokenizer. Furthermore, the Claude-1.3 tokenizer is the same as the GPT-3.5-Turbo tokenizer, modulo some additional special tokens that do not appear in our data. As a result, the token counts for these two model families is the same in our experimental settings.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "F Token Counts",
      "page_numbers": [
        17
      ]
    },
    {
      "id": "afc982c7-0440-4793-9c69-247b829b562e",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Table 2: Token Counts for Closed-Book and Oracle QA",
      "content": "| | Closed-Book | Oracle |\n| :--- | :--- | :--- | :--- | :--- |\n| | avg ± stdev | max | avg ± stdev | max |\n| LongChat-13B (16K) | 55.6 ± 2.7 | 70 | 219.7 ± 48.5 | 588 |\n| MPT-30B | 43.5 ± 2.2 | 58 | 187.9 ± 41.8 | 482 |\n| GPT-3.5-Turbo | 15.3 ± 2.2 | 29 | 156.0 ± 41.8 | 449 |\n| Claude-1.3 | 15.3 ± 2.2 | 29 | 156.0 ± 41.8 | 449 |\n\nTable 2: Token count statistics for each of the evaluated models on the closed-book and oracle multi-document question answering settings.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Table 2: Token Counts for Closed-Book and Oracle QA",
      "page_numbers": [
        18
      ]
    },
    {
      "id": "0b01a560-8461-4e79-a254-49bd93bc8ed7",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Table 3: Token Counts for Document QA",
      "content": "| | 10 docs | 20 docs | 30 docs |\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n| | avg ± stdev | max | avg ± stdev | max | avg ± stdev | max |\n| LongChat-13B (16K) | 1749.9 ± 112.4 | 2511 | 3464.6 ± 202.3 | 4955 | 5181.9 ± 294.7 | 7729 |\n| MPT-30B | 1499.7 ± 88.5 | 1907 | 2962.4 ± 158.4 | 3730 | 4426.9 ± 230.5 | 5475 |\n| GPT-3.5-Turbo | 1475.6 ± 86.5 | 1960 | 2946.2 ± 155.1 | 3920 | 4419.2 ± 226.5 | 6101 |\n| Claude-1.3 | 1475.6 ± 86.5 | 1960 | 2946.2 ± 155.1 | 3920 | 4419.2 ± 226.5 | 6101 |\n\nTable 3: Token count statistics for each of the evaluated models on each of the document question answering settings.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Table 3: Token Counts for Document QA",
      "page_numbers": [
        18
      ]
    },
    {
      "id": "f0a73d3b-ff3c-4824-b92d-24ba01eb4734",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > Table 4: Token Counts for Key-Value Retrieval",
      "content": "| | 75 KV pairs | 140 KV pairs | 300 KV pairs |\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n| | avg ± stdev | max | avg ± stdev | max | avg ± stdev | max |\n| LongChat-13B (16K) | 5444.5 ± 19.1 | 5500 | 10072.4 ± 24.1 | 10139 | 21467.3 ± 35.9 | 21582 |\n| MPT-30B | 4110.5 ± 23.8 | 4187 | 7609.9 ± 31.1 | 7687 | 16192.4 ± 46.6 | 16319 |\n| GPT-3.5-Turbo | 3768.7 ± 23.6 | 3844 | 6992.8 ± 34.1 | 7088 | 14929.4 ± 50.7 | 15048 |\n| Claude-1.3 | 3768.7 ± 23.6 | 3844 | 6992.8 ± 34.1 | 7088 | 14929.4 ± 50.7 | 15048 |\n\nTable 4: Token count statistics for each of the evaluated models on each of the key-value (KV) retrieval settings.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "Table 4: Token Counts for Key-Value Retrieval",
      "page_numbers": [
        18
      ]
    },
    {
      "id": "b6515bbe-eb2d-4934-846a-75bc9fb86763",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > G Full Multi-Document Question Answering Results",
      "content": "G Full Multi-Document Question Answering Results\n\nThis section tabulates model performance when evaluated on the multi-document QA task with varying numbers of documents (Figure 5). “Index n” indicates performance when the document with the answer occurs at position n + 1, where lower indices are closer to the start of the input context. For example, index 0 refers to performance when the document with the answer is placed at the very start of the context (i.e., first amongst all documents).",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "G Full Multi-Document Question Answering Results",
      "page_numbers": [
        18
      ]
    },
    {
      "id": "260c0581-f0a2-4ade-ae39-e4bda4cc47ad",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > G.1 10 Total Retrieved Documents (Table 5)",
      "content": "G.1 10 Total Retrieved Documents\n\n| Model | Index 0 | Index 4 | Index 9 |\n| :--- | :--- | :--- | :--- |\n| Claude-1.3 | 62.9% | 58.3% | 59.7% |\n| Claude-1.3 (100K) | 63.1% | 58.3% | 59.7% |\n| GPT-3.5-Turbo | 76.8% | 61.2% | 62.4% |\n| GPT-3.5-Turbo (16K) | 76.9% | 61.0% | 62.5% |\n| MPT-30B-Instruct | 60.2% | 56.2% | 59.7% |\n| LongChat-13B (16K) | 72.1% | 58.9% | 58.5% |\n\nTable 5: Model performance when evaluated on the multi-document QA task with 10 total retrieved documents.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "G.1 10 Total Retrieved Documents (Table 5)",
      "page_numbers": [
        18
      ]
    },
    {
      "id": "fb604a84-a327-4f76-bd6c-e87da15fb1ee",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > G.2 20 Total Retrieved Documents (Table 6)",
      "content": "G.2 20 Total Retrieved Documents\n\n| Model | Index 0 | Index 4 | Index 9 | Index 14 | Index 19 |\n| :--- | :--- | :--- | :--- | :--- | :--- |\n| Claude-1.3 | 59.9% | 55.9% | 56.8% | 57.2% | 60.1% |\n| Claude-1.3 (100K) | 59.8% | 55.9% | 57.0% | 57.4% | 60.0% |\n| GPT-3.5-Turbo | 75.8% | 57.2% | 53.8% | 54.4% | 63.2% |\n| GPT-3.5-Turbo (16K) | 75.7% | 57.3% | 54.1% | 55.4% | 63.1% |\n| MPT-30B-Instruct | 53.7% | 51.8% | 52.2% | 52.7% | 56.3% |\n| LongChat-13B (16K) | 68.6% | 57.4% | 55.3% | 52.5% | 55.0% |\n\nTable 6: Model performance when evaluated on the multi-document QA task with 20 total retrieved documents.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "G.2 20 Total Retrieved Documents (Table 6)",
      "page_numbers": [
        18
      ]
    },
    {
      "id": "4b7c5e37-bf11-4d72-8342-0fd1c64fbc29",
      "heading": "Lost in the Middle: How Language Models Use Long Contexts > Appendix > G.3 30 Total Retrieved Documents (Table 7)",
      "content": "G.3 30 Total Retrieved Documents\n\n| Model | Index 0 | Index 4 | Index 9 | Index 14 | Index 19 | Index 24 | Index 29 |\n| :--- | :--- | :--- | :--- | :--- | :--- | :--- | :--- |\n| Claude-1.3 | 59.1% | 55.1% | 54.8% | 55.7% | 56.4% | 56.2% | 59.9% |\n| Claude-1.3 (100K) | 59.1% | 55.1% | 54.9% | 55.7% | 56.6% | 56.1% | 60.0% |\n| GPT-3.5-Turbo (16K) | 75.6% | 55.1% | 50.5% | 50.9% | 51.8% | 54.9% | 63.7% |\n| MPT-30B-Instruct | 51.6% | 51.7% | 51.2% | 49.0% | 49.2% | 51.7% | 55.1% |\n| LongChat-13B (16K) | 66.9% | 54.8% | 52.5% | 52.9% | 52.2% | 51.3% | 55.1% |\n\nTable 7: Model performance when evaluated on the multi-document QA task with 30 total retrieved documents.",
      "main_heading": "Lost in the Middle: How Language Models Use Long Contexts",
      "section_heading": "Appendix",
      "chunk_title": "G.3 30 Total Retrieved Documents (Table 7)",
      "page_numbers": [
        18
      ]
    }
  ]
}